# This is like the thid approach I tried, there's now way I'm optimizing this.

input = DATA.readlines(chomp: true).map { |line|
  eval(line.gsub(/]/, "].freeze"))
}.freeze

def deep_dup(array)
  array.map { |x|
    x.is_a?(Array) ? deep_dup(x) : x.dup
  }
end

def dfs(number, depth=0, parent=nil, parent_index=nil)
  Enumerator.new { |y|
    number.each_with_index { |elem, i|
      if elem.is_a?(Integer)
        y << [elem, depth, number, i, parent, parent_index]
      else
        dfs(elem, depth + 1, number, i).each { |*args|
          args.each { y << _1 }
        }
      end
    }
  }
end

def explode(number)
  number = deep_dup(number)

  elems = dfs(number).to_a
  prev_array = nil
  prev_index = nil

  elems.each_with_index { |(n, depth, array, index, parent, parent_index), i|
    if depth == 4
      if !prev_array.nil?
        prev_array[prev_index] += n
      end

      if i + 2 < elems.length
        next_array = elems[i+2][2]
        next_index = elems[i+2][3]
        next_array[next_index] += array[1]
      end

      parent[parent_index] = 0

      return [number, true]
    end

    prev_array = array
    prev_index = index
  }

  [number, false]
end

def split(number)
  number = deep_dup(number)

  dfs(number).each { |n, _depth, array, index|
    if n >= 10
      left = (n / 2.0).floor
      right = (n / 2.0).ceil

      array[index] = [left, right]
      return [number, true]
    end
  }

  [number, false]
end

def reduce(number)
  loop do
    number, was_exploded = explode(number)
    next if was_exploded

    number, was_split = split(number)
    next if was_split

    return number
  end
end

def add(a, b)
  reduce([a, b])
end

def get_magnitude(number)
  left, right = number
  left_value = left.is_a?(Integer) ? left : get_magnitude(left)
  right_value = right.is_a?(Integer) ? right : get_magnitude(right)

  left_value * 3 + right_value * 2
end

puts get_magnitude(input.reduce(&method(:add)))

puts input.combination(2).flat_map { |a, b|
  [add(a, b), add(b, a)].map(&method(:get_magnitude))
}.max



__END__
[[8,8],5]
[[[[9,0],1],4],[[3,6],[0,5]]]
[[9,[0,[4,5]]],[1,[[6,8],4]]]
[[8,7],[[[8,5],[2,0]],[[6,3],[5,0]]]]
[[[1,8],2],[[[9,1],[2,0]],[1,[9,4]]]]
[[[6,[8,8]],[6,4]],[[8,2],[[0,8],9]]]
[[[6,3],[9,[9,1]]],[[0,0],1]]
[[[[2,7],[8,2]],[[9,6],[5,1]]],[[[7,6],[6,0]],[4,2]]]
[[[8,[9,1]],[9,3]],[[[5,4],[8,0]],[[3,5],[9,5]]]]
[[[3,[4,9]],2],[[7,9],7]]
[[[7,[9,0]],5],[[[3,4],[2,6]],[[3,5],[7,2]]]]
[[8,[8,9]],[[[3,2],[6,2]],4]]
[[[[8,0],3],[3,8]],[[[5,0],[7,3]],[5,[3,0]]]]
[4,[[3,[0,9]],[[5,0],[2,0]]]]
[[[[0,1],5],[3,[9,6]]],[[[4,4],5],[[3,8],[5,1]]]]
[[[[4,8],8],0],[5,[[1,7],[4,3]]]]
[[3,[[1,1],[5,6]]],[7,[[4,0],[0,7]]]]
[9,[4,[[1,3],2]]]
[[[1,[2,7]],[[4,7],3]],[2,1]]
[[[9,5],[2,5]],[[[8,9],[4,5]],2]]
[[2,[[7,4],6]],[[1,[0,7]],[[4,8],8]]]
[[[[0,5],3],[7,0]],9]
[[[[1,4],[4,3]],7],[[9,4],[6,[8,6]]]]
[[[7,2],[[3,3],1]],[5,9]]
[[[9,[6,2]],2],[[6,5],6]]
[[5,[3,2]],[[[2,4],[1,5]],[6,3]]]
[6,3]
[[9,6],[[[8,2],[5,6]],[[3,5],[3,3]]]]
[[[[2,5],7],4],[8,3]]
[[[[6,1],9],[0,6]],[6,2]]
[[[[8,4],2],[[0,1],[5,8]]],9]
[[[7,0],[4,9]],[[[9,9],[4,4]],[6,6]]]
[[[9,8],[2,0]],[[9,[6,2]],[6,[5,6]]]]
[[[9,8],[[0,6],[3,5]]],[[[4,7],[7,5]],[7,[8,5]]]]
[[[[9,0],[1,6]],[2,[5,3]]],[[[2,0],[0,3]],[[9,1],[7,7]]]]
[[[5,[2,2]],[2,[1,0]]],[1,1]]
[[[9,[7,2]],[[2,7],1]],[[5,7],[[8,7],7]]]
[[[9,[9,4]],[[0,8],2]],[0,[[2,2],[4,1]]]]
[[[5,5],[9,[2,0]]],[[[9,0],6],1]]
[[[1,9],[[9,5],[5,6]]],[6,[5,[9,4]]]]
[[[[8,6],9],9],[[7,2],[7,[2,6]]]]
[[[[6,4],7],7],[[2,[9,7]],7]]
[[7,[[5,6],9]],[[[9,8],8],[[8,9],[1,0]]]]
[[[0,[7,6]],0],[[[2,5],1],9]]
[[[3,[4,1]],[4,2]],[0,[[6,0],[1,6]]]]
[[9,[0,0]],[[[3,0],[9,9]],[1,[1,5]]]]
[[[[9,9],1],6],[5,6]]
[3,4]
[[[[5,4],9],6],2]
[[5,4],[[6,[7,4]],[[0,3],0]]]
[[[3,[9,6]],4],[[[9,8],6],3]]
[[5,[1,[5,5]]],[[[3,8],[0,1]],[[9,3],[6,2]]]]
[[4,[0,3]],1]
[[[7,[2,9]],[[5,8],2]],[[[4,4],[2,0]],8]]
[[[[4,0],0],8],7]
[[[[3,0],0],[[6,0],3]],[[[1,5],1],[3,[0,0]]]]
[[[[8,1],5],0],[[[3,9],[8,3]],[[6,9],[5,1]]]]
[[7,7],[[[8,5],2],[9,2]]]
[[[[4,9],9],[6,[5,3]]],[[[7,1],[7,1]],[[9,5],[7,0]]]]
[[7,[0,5]],[7,[2,[1,6]]]]
[[9,[0,[0,2]]],[[1,1],[[6,6],[5,3]]]]
[[[2,9],[[6,9],9]],[[[4,2],7],[1,[2,3]]]]
[[[0,1],[3,3]],[3,[[2,7],2]]]
[[[5,6],8],[[[4,9],[3,3]],[6,[5,2]]]]
[[4,[4,[2,5]]],[[2,[4,8]],[3,[7,7]]]]
[[2,5],[[[9,6],[9,3]],[[4,5],[2,3]]]]
[[5,[0,5]],[[[2,1],[0,5]],3]]
[[[[2,0],5],[[7,9],[4,5]]],[0,[[1,4],9]]]
[[[[1,3],2],[[3,9],[9,5]]],[[[4,1],[3,8]],0]]
[[[[1,8],[8,3]],[3,0]],[[5,1],[4,8]]]
[[1,6],[3,2]]
[[4,5],[[[9,3],[8,6]],[2,[8,6]]]]
[[[[4,4],1],[[7,3],2]],[[9,[2,1]],[8,2]]]
[0,[[2,[3,8]],9]]
[[1,[5,0]],[0,[[2,6],[8,5]]]]
[[6,[6,1]],[[2,[7,9]],[[8,3],1]]]
[[[2,[5,9]],[[8,9],1]],[[[5,2],2],4]]
[[[4,3],5],[[6,[3,6]],5]]
[1,[6,[6,2]]]
[[[[4,9],3],9],[[3,9],[8,[4,9]]]]
[[[[7,1],[1,6]],[[7,8],[3,7]]],[[[5,3],7],[9,[3,1]]]]
[[[[0,8],[8,9]],2],7]
[[[[3,7],[9,8]],[[7,1],8]],[[4,[4,6]],8]]
[3,[3,[[4,4],5]]]
[[3,[[2,3],7]],[[7,9],2]]
[[[[0,6],[5,1]],[[7,2],5]],[9,8]]
[[4,0],[[4,3],[7,2]]]
[[[8,[1,1]],[7,[9,1]]],[9,[9,[0,8]]]]
[9,[[[4,5],8],[[3,4],9]]]
[[[6,[4,7]],[8,7]],[[[3,8],5],[[2,1],[3,5]]]]
[[[[5,5],[6,8]],[[2,3],6]],[8,[5,7]]]
[[5,[[6,1],[3,6]]],[[[0,6],[7,1]],[9,[8,4]]]]
[[[[0,1],[4,9]],[[1,7],[3,3]]],[6,[3,[6,1]]]]
[[[[3,8],5],[[4,7],2]],2]
[[6,[[4,4],0]],[[2,[4,5]],[8,2]]]
[[6,[9,[7,0]]],[[9,[1,6]],[[6,1],1]]]
[[[[2,1],[5,7]],[5,[9,3]]],[[[7,9],[4,2]],4]]
[[3,1],[[7,8],[[8,8],9]]]
[[[[9,4],[1,8]],[9,[3,7]]],[[6,9],[[7,2],1]]]
[[[9,3],2],9]
