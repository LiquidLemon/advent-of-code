input = DATA.each_line.map { |l| l.chomp.chars }

ADJ = [
  [0,-1], [1,-1], [1,0], [1,1], [0,1], [-1,1], [-1,0], [-1,-1]
]

def step(grid)
  grid.map.with_index do |row, y|
    row.map.with_index do |cell, x|
      neighbors = ADJ
        .map { |xx, yy| [xx + x, yy + y] }
        .select { |coords| coords.all? { |c| (0...grid.length).include?(c) } }
        .map { |xx, yy| grid[yy][xx] }
      if cell == '.' && neighbors.count('|') >= 3
        '|'
      elsif cell == '|' && neighbors.count('#') >= 3
        '#'
      elsif cell == '#' && (neighbors.count('#') == 0 || neighbors.count('|') == 0)
        '.'
      else
        cell
      end
    end
  end
end

def display(grid)
  puts grid.map(&:join).join("\n")
end

def value(grid)
  trees = grid.flatten.count('|')
  lumber = grid.flatten.count('#')
  trees * lumber
end

grid = input
10.times { grid = step(grid) }

puts "Part 1: #{value(grid)}"

states = []

MAX = 1_000_000_000
(11..MAX).each do |i|
  grid = step(grid)
  if states.include? grid
    start = states.find_index(grid)
    length = states.size - start
    final = states[start + (MAX - i) % length]
    puts "Part 2: #{value(final)}"
    break
  end
  states << grid
end

__END__
...|.#.|#.....|.#||#.|..|.........|...|.||#..||...
##.|..#...|..#..#.##.#....|.#..#........|#.##|....
.|..|#...#.....|||.|.....|.#.......|.#.....|...|..
.#|.||#......#.||.|.....#|..||...#..|....##..#..#.
.|.|##...##.|...|#..#|#|#...|...#||.|.|.|..|..||..
...|#|....#..##...#.|.|##.#||.......||..||..#...|#
.|..|.|.|.#|#.##.##|.#|.#|..|#.|....|..#...|#|#|.#
...|#|....|.#.|......|.|.##..#..#|..|..|...#.#|...
..||.|....|..#..||..|#|.##.....##||....|#........|
.#.#||...||#.##..#.....|.#||#......|...#.|.....|..
......##...#.........|.|#..||...|#||.##...|..##..|
...||..##.#||......#....|.||#|.....|..........#.|#
.....|..|##.|##.#....|.||#...#..#...#.|..|.#...###
.|.#|#.||..#..#...#..|..|......|#|....|.........|.
.#|.#.##..|.#.|.#.#..#|.....|#.#...#...|###..#.#.|
#|..#|..|.........|#.|...#..#.|.#|...|.....|.#||.#
.#....#..|.#|##|##...|.||##.#.|.|...|..#||..#...|.
#.|.||#|||.#|....|....#.##.||#|...|...#...#.##.#..
.#.##.|#.#..|##|.#...........|.|.|..||||.|.|...#|#
|..#...#.#..||....#...##..|.#..#..|..#....##....#.
.|||#.|.........#|.|.|#..##...|....##.|.|.....##..
.....|.|..|#||.#..|........||.#|.....###.#...||#.|
..|||||.##.##...##|...#|.|.#|......|...|#..#....#|
..|#.##......#||....|.|.##.#.|#|.#|||..|.#|.#.#.#.
...#.#...#...#..#..|.#.|...|..|............#...|..
#.....##...#.#.|..#....|.....#.##..##..#..........
||.##..###||.#.#.|..|.#..#.|||#...|#...|..#....|..
..||.#|..........|...|.##...|...|.#....|.#|...|#|.
..||.#...|.|.|...#|.##..||.....#.##....##....#.###
#####..#..#.||...|||...|....|||#.##.#.......##....
..|.##.#.#||.#..#.....||..|#..#...|.|..||.|||...|.
.#.#..#.#.|#.#...#.#.#.##..|#..|..#.||.#..#.....|.
#|..#|......#.#..|...#....#..#..#.##..##..|..#|...
#.|##...#..|.#..#..#||..#...|..#|#|.||#|.||.#.....
##|....#...#|.|#.##.|#|||#|#.#....|....||....|#...
.#|...#...#..#..........||.||...|..||.#.#..|....|#
|..#..####|#.|.#..#...#|.#.##....|#..#..||#.#|.#..
||.|#..|..#....|..#||.|||.|#.|.#|##.|.|.||.|.|#|..
.....|....|...|.#..####|#|....|...|.|....|..#..|..
...#|....|..##.#.|...|..#.#||#.|.#|..|#.|.#...|...
.....##...#|...#|#....|....|###|#..|..|.#.#.....#.
#.|.|.#.#|....#|.#...|##..#.|.##....|.||.....#.#.#
|#.#..#..#|||.....|...|.||||..##..##..|#.|###.|.|.
.#.|...|..........|.|.##|..|.......#|....#...|#|..
..#.#..||..|||...|..#||..#..|..||..#.#..|..|.|...|
|......##|......|..#||||#...|||..........|#.|.|.#.
#|..#.||..|..#........|#.#....#.|.#|#..#........|.
..|#..|.##.#.....#...#..|#.|##.#.#||#......##....|
..|..#.......|##.#.#.|##|.......|.#.......|.#.#.|.
#...|.....#|......|||#||...#....#||.|#....|...#..|
