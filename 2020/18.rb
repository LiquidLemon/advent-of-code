data = DATA.each_line.map { |l|
  l.chomp.delete(" ").chars.map { |c|
    if (?0..?9).include?(c)
      c.to_i
    else
      c.to_sym
    end
  }
}

# This was my initial solution for part 1. Just simple recursive eval.
# No need to keep it in the code as the more generic shunting-yard approach
# can also be used instead.
#
# def evaluate(expr, i=0)
#   acc = nil
#   op = nil
#
#   while i < expr.size
#     token = expr[i]
#     i += 1
#
#     case token
#     when Integer
#       if op.nil?
#         acc = token
#       else
#         acc = acc.send(op, token)
#       end
#     when :*, :+
#       op = token
#     when :"("
#       value, i = evaluate(expr, i)
#       if op.nil?
#         acc = value
#       else
#         acc = acc.send(op, value)
#       end
#     when :")"
#       return acc, i
#     end
#   end
#
#   return acc
# end

def infix_to_postfix(expr, prec)
  output = []
  operators = []

  expr.each { |token|
    case token
    when Integer
      output << token
    when :+, :*
      while !operators.empty? && operators[-1] != :"(" && prec[operators[-1]] >= prec[token]
        output.push(operators.pop)
      end
      operators.push(token)
    when :"("
      operators.push(token)
    when :")"
      while operators[-1] != :"("
        output.push(operators.pop)
        if operators.size == 0
          raise "No matching parenthesis found."
        end
      end
      operators.pop
    end
  }

  while !operators.empty?
    if operators[-1] == :"(" || operators[-1] == :")"
      raise "Unmatched parenthesis found."
    end
    output.push(operators.pop)
  end
  output
end

def eval_postfix(expr)
  stack = []
  expr.each { |token|
    case token
    when Integer
      stack.push(token)
    else
      a = stack.pop
      b = stack.pop
      # Object#send is a tiny hack to avoid having to write a conditional ;)
      stack.push(a.send(token, b))
    end
  }
  raise "Invalid amount of items on the stack: #{stack.size}." if stack.size != 1
  stack.first
end

precendences = {
  :+ => 1,
  :* => 1
}

puts data.sum { |expr|
  eval_postfix(infix_to_postfix(expr, precendences))
}

precendences = {
  :+ => 2,
  :* => 1
}

puts data.sum { |expr|
  eval_postfix(infix_to_postfix(expr, precendences))
}

__END__
(6 + (9 + 4 + 8 * 2 + 3) * 6 + 8 + 4) + 3 + (6 * 5 * 2) * 6
(4 + (4 * 9)) + 8 + 9
(3 * 5 + (3 * 7 * 2 + 2 * 7) * (3 * 8 * 5)) * 4 * 4 + 9
(7 * (5 * 7 + 9 + 5 + 6) + (8 * 3) + 6) * ((9 * 2 * 5 + 7 + 2) + 2 * 5 + 7 * 8) * 2 + (8 + 5 + 8) * 8 * 5
(9 + 2 * 7 + 2 + 3 * (3 + 9 * 6 + 3 + 7 * 5)) * 6 * 8 * 2 * 9 * 8
(5 * 5 + 2 * (9 * 5 * 7 + 3 * 4 * 8) * 9 + 4) + 5 * 3 * 5
2 + 7 + 7
7 + (7 * (2 * 9)) + 5 + 7 * 4
3 + 5 + 2 * 9 + 4 * (7 * (7 + 4 * 7) * 2 * 6 * 8)
6 * 8 + 9 + ((3 + 6 + 2 * 8) * 3 * 3 + 7 * (9 * 5 * 8 + 5 * 2 + 8) * 4) * 4
((6 * 2 + 2 * 4) * 7 + 9 * 4 * 5 * 9) + 7 + 5 + (2 + 2 * (7 + 2 + 8 + 9 * 9))
((9 + 3 * 2 + 8 + 3 * 6) * 7) * (6 * 7 * 2 * (2 * 8 + 5 + 4 * 2 + 3) + 2 + 3) + 6 + 5 + (4 * 2 + 7 + 5 * 7)
(9 * 9 * 5) * ((2 * 5) + 4 * (8 + 4 * 7 * 8 + 5 * 5) + 2 + 4)
5 * 9 * 9 + 3 * 5 * ((2 + 7 * 3 * 5) + (8 * 5 + 4 + 6 + 2 * 9))
(8 * 4 * 6 * 8 * 7 + (2 + 4 * 3)) + 6 * 3 * 7
((2 * 3 * 6 * 7) * 4 + 5) + 8 * ((3 * 4 * 4 * 5 + 8) + 7 * 9 * (4 + 5 + 9 + 8)) + ((9 * 8 + 8) * (9 + 2 + 7) * (6 + 4) + (8 * 5 * 5))
(9 * 4 * 5 * 6 * 3 * 7) + 9 + 7 * 8 + 3 * 4
(6 + 3 + 8 + (9 + 2 + 2)) + 3 + ((7 * 3 + 3 * 8 + 3) * 7 + (4 + 5 + 7 + 3)) * 2 * 8 * 2
2 * 4 * (4 + 4 + 7 + 4 * (5 * 6 + 4 + 6 + 7) * 8) + 4 + 2 * 3
2 * 9 + 7 * (7 * 2 * 6 * 6 + 6) + 8 * 7
4 + 4 + (7 + 4 * (5 + 7 * 7 + 4 + 3))
(4 * 9 * 5 + 7 + 5 * 3) + 7 + 9 + (3 * 4 * 7 * (5 * 4 * 4 * 4) + 8 * 6) + 6 * 4
3 * (5 * 9) + 9
8 + 7 * 8 * (6 * (2 * 5 + 5 * 8 * 2 + 4) + (6 * 9 * 7 + 6 * 7 + 7)) + 6
6 + 9 * 6 * 4
2 + (3 * 3 * 6) + 4 + 3 * (8 * (7 * 4 * 9 + 7 + 7) * (6 * 2 * 4) * 3) + 6
2 + (3 * 9) + 6 * (4 + (9 + 6 + 5 + 8) * 7 * 2) * (6 * 3 * 3 + 6 + (4 + 6))
7 + 8 + 5 * (6 + 8 * 2 * (3 + 3 + 5 + 3 + 4) * 6) * 4
4 + 5 * 2 + ((7 * 3) * 3 + 9)
9 + 5 * (5 * 7 * 7 * 7 * 4 * 6)
2 * 9 * (5 * (8 + 2 + 4 * 3 * 5) + 6) * 4 * 2 * 5
(8 * 9 + 7 * 4 + 4 + (5 * 6 + 7 * 6 + 3)) * (5 + 8 + 5)
((6 + 2) * 5 * 4 + 8) * 4 + ((9 * 3 * 5) * (4 * 4 * 8) + (3 + 2) * 3 + (3 + 2 * 7 * 3 * 9)) * 5 * 2 + 7
6 + 6 * 8 + (6 * 3) * 7 + (6 * (7 + 6))
4 + (7 * 7 * 4)
4 + 9 + ((2 * 4 + 4) + 7 * (2 + 5 + 3)) + 4
((5 * 8 + 5 * 8 + 2) + 9) * 4 + 6 + 4 + 6 * 4
(9 + (4 + 7)) * 4 * 9 + 6 * 6 * (4 + (5 + 6 + 5 * 9 + 7 * 7) * 6)
2 + 9 + (5 + 7) * 9
3 * 7 + 4 * (7 * 3 + 9 + (2 * 7 + 2 + 7 + 6) * (2 + 4 + 4 * 3 + 2)) + ((2 + 6) * (8 * 2 + 6))
(8 * 6 * 6 * (7 * 8 + 5 + 6 + 2 + 8) * (7 * 7 + 7 * 3 * 2) + (3 * 2)) + 6 + (4 * 4 + 3 * 5)
6 * (5 + (9 * 5 + 5 * 7 * 8) * 8 * 8 * (4 * 9 * 4 + 2) * 2) * 2
7 + 6 + ((7 * 3 * 7 + 8 * 3) * 3 * 3 * 3)
9 * 8 + (9 + 4 + 3 * 6 + (3 + 9 * 5 * 8 * 3 * 5) * (4 + 3 * 9 * 3 * 7)) + 8 * 5
8 + (8 + (3 + 2 * 7 + 7) + (2 * 5 * 8 * 7)) * 6 + 6 + 6
(9 + 7) + 8 + 7 * 5 * 3 * 9
9 * 2 * (3 * 7 * 8) * 8 + 9 + 2
3 + (8 + 8 * 7 + 4 * 4 + 5) * 5 * 2
4 * (9 * 4 + 3 * (9 * 3 * 9)) * 8 * 8 * 2 + 7
8 * 6 + (5 + 9 * 8 * 6) * (5 * 4 + (9 * 5)) * (3 + 8 * 3 + 9 + 9 * 8)
4 * 2 * 7 + 6 + ((3 + 3 * 4 * 4) + 4) * (3 + 2 * (4 + 2 + 2 * 5) + 6 * 2 + 3)
5 + 6 + (6 * 2 + 9 + 4 + 2) + 2 * 9
(5 + 2 * (9 + 3 + 7 + 6 * 9 * 3) * 5 + 3 * 5) + 2
7 * 6 * (6 + 3)
8 + 8 + 9 * 5 * 8 * ((2 + 5 + 7 + 7 + 5 * 3) + 2 + 5)
8 + 5 * 3 + 7 + 5 + (9 + 8 * 9)
5 + (2 + (5 + 6 + 9) * 4 * 6 * 9 * 3) + 5
8 * 6 * (5 + 7 * 5) + 4
4 + 5 + (3 * 9) + 6 * 9 * (8 * 2 + 5)
6 * 3 + 9 + 5 * (8 * 9 + 9 * 8 * 9 + 5)
6 * 8 * (4 * 7 * 4 + 2 * 2)
6 + 8 + 9 * ((5 * 7 + 9 + 2 * 5 + 8) + (4 * 5 * 3 * 4) * 3 + 4) * ((3 + 2 + 2) + 4 + 6 + 6 + 8 * 8) * ((4 * 5 * 4 + 9 * 8) + 9 + 9 + (9 + 8) + 9)
7 + (5 * 2 + (5 * 4) + 4 * 4) * 8
9 + (6 + 5 * 6 + 9 * (5 * 6) * 5)
6 * (9 * 3 * 6) * ((7 + 2 * 7 * 2) + 2 + 9 * 7 + (3 + 3 + 4)) + ((2 + 6 * 7 * 9 + 9) + 9) + ((4 + 8 + 2 + 4) * (4 * 7 + 3 * 5) * 5 * (6 + 3 + 9 + 2 * 7) * 5) + 2
(2 + 9 * 3 * 2 + 9 * 5) * 3 * 5 * 2 + (9 + 7)
4 + 3 + (9 + 3 * 7 + 2 * (6 * 3))
5 * 9 + (7 * 3 + (8 + 3 * 9 * 4 * 3 * 4) * 9 + 7 + 9) + 4 + 9
(6 + (9 * 2) + 9) * (4 + 6 * (7 + 6)) + 9 + 7 * (7 + 8 + 9 + 8 + 5)
6 + 9 * (9 + 5 * 2 + (7 * 3) * 8) + (7 * 5 * 4 * 8) + 4
4 * (4 * (7 + 8 + 4 + 2 + 5 + 5) + 7 * (8 * 4 + 7 + 6 * 9 + 4)) + 6
((5 * 6) + 6 + 6 * 5 * 7) + 6 * 4 * 4 + 2 + 5
((2 + 8) * 7 + 8) * (6 * 7 + 5 * 6)
2 + 8 + 7 + (6 + 8 + 2 + 7 * 8 + 6)
6 + (7 * 5 * 7 * 2 * 3) * 7 * 2 * 6 * 9
4 * ((5 + 6) + (4 + 3) + 4 * 8 + 4 + (3 * 9 + 2 + 9 * 8 * 3)) + (8 * 7 + 2) * 3
9 * (9 + 8) + 8 * 3 + (5 * 9 + 7 * 4 + (3 * 7 * 7 + 3 + 4) * 5)
(6 + 4 * 4) + 8 + ((4 + 4 + 6 + 2 * 4) + 3 * 6 * 9 * 2 * 3) + (5 + 8 + 7 * 8 * 6 + 2) * 2 + 2
(4 * 2 + 2 + 8 * 9) + 6
9 + (6 + 3 * 4 + 5) + ((2 * 9 + 2 + 3 * 7) * 5 * 9)
7 * ((6 * 2 + 2 * 3 * 3 * 5) * (6 + 9) * 9 * 5) + (8 * 4 * 6 + 2 + 3 * 3)
(5 * (7 + 9 + 7) * (3 * 3 + 7 + 4 * 3) * 6 + 3 + 9) * (8 * 7 + 4 * 9 + 5 * 8) + 6 * 7 + 3
(7 * 9 + 7) * 7 + 7 * 9
(2 + 4 + (9 + 4 * 5 + 7 + 6) * 2 + 3 + 5) + 5 + 8 + (6 + 4) + 2 + 7
4 * 5 + (3 + 3 * 5) * (6 * 3)
(7 * 7 * 2 * 2 + (9 * 6 + 9) * 2) * 7 * 5 + (9 * 8 + 4 + 7) * 9
9 * 8 * 9 + (5 + 4 + 7 + (4 + 8 + 4) * 7 * (2 + 8 + 2 * 8)) + 8 + 7
8 + 2 * (4 * (5 * 4) + 2 * 9 + 9 * 6) + 5 + 5
5 + (7 + (3 * 8) + 3 + 5) * 4
((8 * 8 + 4) + 3) + 2 + 5
7 + 7 + 7 + 6 * (6 * 8 + 5 + 2 * 6) + (2 + 9 + (2 + 7 * 6 * 9) * 5 * (9 * 3 * 2 + 4 + 9))
(2 * 5 + 2 * 3 + 2 * 5) * (6 * 4 * 6) * 4 * 7
3 * 8 + 7 + 7 + 4 + (3 * 2 + 7 + 3 + 4)
8 * 8 * 3 + (4 + (2 * 2 + 3 * 4 * 6 + 9) * 4 + 6) * (4 * 7 * 2)
(8 + 8 * 6) + (9 + 9 * 7 + 7 * 2) + 3
2 + (5 + 7 * (3 * 2 * 5) + 7 + 4) + 7 * 2 * (3 * 6) + 4
3 * (9 + 6 + 6) + 8 + 6 + 6 + ((4 * 4 * 7) * 3 * (8 + 4 * 3))
6 * (7 + 4 + 4 * (8 + 6 + 8) * 5) + 8
4 * 3 + ((5 + 7 + 8 * 2) + 5 * (7 + 5 * 4 * 4) + (2 + 2) * 8)
6 * 9 * (2 + 9 * 2 * (6 * 8 + 3) * 3 + (4 + 4 * 7 + 7)) + 6 * ((9 * 3 + 4) * 8)
7 + 6 * 5 * 4
4 * 7 * 3 + 9 + (7 * (6 + 9 + 3 * 5) + 2 + 6 + 5 + 6)
8 * 7
(5 + 7 + 8 * (6 * 6 * 5)) * 4 + 3
9 + 9 * 5 + 3 + (5 + (9 + 7 * 3) * (9 + 6 + 8) * 6 * 2)
5 * (7 + (6 + 9 * 7 + 4) * 9 * 5) + 8 * ((2 + 9) * 7 + 2 + 5) + 9 + 7
3 * 5
(3 * 8 * 3) * (9 + 6 + 3) * 4 + 2
3 + (5 * 8 * 2) + (4 * 4 + 3 + 9 * 8) + (7 + 8 * 4 * (7 * 6) + 2) + (2 + 6) * 6
4 + 2 + (6 + 8 + 8 + 9 * 2 + (2 * 5 * 7 + 7 * 8 + 2))
2 + ((6 * 7 + 4) + (5 + 2 + 3 * 4 * 9) * 6 + 2) + 4 * 9
6 + (9 * (2 + 8) + 7 + 7) * 7 * (4 * 7 + 2) * 2 + 5
(7 + 7 * 6) * 4 * 9
3 * 3 * ((5 + 6 * 2 * 3) * 6 + 7 * 8) * (6 + 7) + 4
5 + (7 + 6) * 7 * 2 + 4
((4 + 3 * 6 + 9 * 7) + 8) * 3 + (7 + 9 * 6 * 7 * 7 * 8) * 3 + (4 * (5 + 6) + 2 * (9 * 3) + 5 * 6) * 2
7 + 6 + 5 + (5 * 6 + 3 + (5 + 9 * 5 * 4)) + (3 * 5)
((8 + 8 + 8 * 8 + 2) * 3 * 6) * 3 + 9
(6 * 4 * 9 * 9) + 3
6 * ((2 * 7 * 4 + 9 + 6) + 7 + 8 * 9) * 6 * 3 + 4
7 + 3 * 8 + 7 + (4 + 4 * 4 + (7 * 5 * 8) + 5 * 9)
4 + 7 * 9 + (2 * (2 + 5 + 8 * 2 + 5 * 8) * 4 * 2) * 7
(7 * 9 + 7 * 9 * 2 + 5) + 9 + (8 + 2 * 5 + 9 * (4 * 7 * 7 + 8 * 2 + 2) + 6) * 6 + 7 * 3
6 + (9 + 6 + 3) + 5 + 9
7 + 9 + 4 + (2 + (5 + 4) * 5 * 4)
4 + 5 + 6 * ((6 + 3) * 8 * 5 + 9) * 2
6 + (2 + 9 * (4 + 4 * 2)) * 6 + 3 * (9 * 3) + 8
7 * 5 + 4 * ((3 + 4 * 4 * 6 * 4 * 6) * (7 * 9 + 2) + 6)
5 + 5 * (6 * 9 + 8 + 8 + 8 + (4 * 2 + 3 + 5 + 7)) * (5 + 5 + 6 + 9) * 2
4 + (7 + (3 * 5 + 9 * 8 * 7 * 9) + 7 + 4 * (9 * 4 * 6 + 8 + 6 + 9) * 5) * 9 * 3 * 3
5 + ((9 * 8 + 8 + 4 * 2) + 9) + 4 * 3 + 9 * 6
(6 * 3 + 6 * 2) + (7 * (3 + 2 * 3) * (9 * 4 * 2 + 7) + 6 * (6 + 9 * 9 * 5 + 4 + 9)) * 9 + 5 * 8 * 7
7 + 7 * 6 * (4 + 5 * 5)
9 + (7 * 8 * 2 + 4 * (2 + 3 + 5 * 5 * 8) * (2 * 8 + 3 * 3 + 3)) * 4 * ((3 + 6) + 3) + 4 + 7
7 + 4 * 8 * 2 * 3 * (4 * 3 * (8 * 3) * 8)
2 * (8 * 3 * (3 * 8)) * 9
2 + (6 + 3 + (9 + 3 + 5 * 9 + 5 + 5) + 2 * 7) + 7 + 8 * 9 * 3
((7 + 6 + 2 + 4 + 8) * 3 * 2 * 3 * 5) * 8
((8 * 8 * 7 + 5) + 8 + (8 * 4 * 9 + 2 * 3 * 8) * 7 + 5 + 6) * 5 + 6
3 * (5 * 7 * 2 * 9) + (9 * 7 * 7 * 4) + ((6 * 4 * 3 * 2 + 9) * 9 + 5 + 3 * (6 * 9 * 6 + 9 * 2 + 2)) * 9
(3 * 3 + 2) * ((9 * 7 + 4 * 5) + 2) * 8 + 5
7 * ((4 + 4 + 8 + 5 + 8) * 8 * (6 + 4 + 4 + 2 + 3)) + 6 * 8 + 9
9 + 6 + (3 + 5 * 7 * (7 * 8 * 6 + 7 * 3) * (4 * 8)) + ((8 * 4 + 6 + 8 * 8 * 4) * (9 * 3 + 4 + 2) * 2)
7 + 7 + 4 * 3 + (3 * 5 * 7 * 6 + (6 + 7 + 5))
9 * 3
3 * 6 + ((6 * 8 * 3 * 7) + 3 * 7 * 2 + 7) * 7 * 3 * 4
(5 + 5 + 7) * (9 + (9 * 6 + 5 + 3 * 9 * 5) + 7 + 4 * (9 * 8)) + 5 * 7 + 9
6 * (9 + 5 * 6 + 7 + (4 * 7 + 8 + 6 * 3) + 5) * 4
6 + 8 * (5 * 3 + 7 + 3 + 3 * 5) * 5 + 9 * 6
5 + 9 + 8 * 9 * 2 + (8 * 9)
(8 * 2) * 7 * 8 * ((8 * 3) * 7 * 6 * (9 + 7 * 3 * 2)) * 4
(4 * 2 * 7 * 4 * 3) * 8 + 4
((9 * 3 + 9 + 2) + 9 * 3) * 2 * (6 + (8 + 7 + 7) + 7) + 8 * 3
3 * (4 + 2 * (9 * 5 + 9 * 7) + (4 * 8 + 2)) * 9
5 + 8 + (7 * 9 + 5 * 3 * 8) + 2
8 * (5 * (6 * 9 + 7) * 2 * (2 + 6 * 7 + 7 * 2 + 6) * 5)
5 + 4 * 6 + 7 * (3 + (6 * 8) + 2 + 5 * 2) * (5 * 5)
(7 + (5 * 7 + 8)) * 6 * 2 + 2 * 2 * (6 * 9)
((6 + 2 * 2 + 3) * 7 * 9 * 6 + 7 * (3 * 7)) + 6 + (6 * (5 * 9 + 3 + 5 + 5 * 6) * 8) * 9 + 4 * 5
7 + 7 * ((9 + 3 + 5 * 6) + 3 * (2 + 6 + 4 + 5 * 2) + 2 * 8) + 9
(9 * (3 * 2 + 9 + 9 + 3) + 9 * (8 + 4 * 5) + (7 + 7) * 6) + 8 * 7 + 3 + 5 * 8
4 * (5 * 3 + 6 + 6) + (4 + 3 + 9 * 8) + 5 * 9
(9 * 7 + 8 * (3 * 6 + 5 + 3 + 3) + (6 + 5 * 5 * 7 + 4)) * (8 * (7 + 5 + 6 + 4)) + 6 * 5
(5 * (3 * 6 + 4) + (7 * 5 * 7 + 2 * 7 * 9) * 7 * 8 + 2) * 3
((2 * 5 + 7 * 9 + 7 + 8) * 3 + 4 + 2) * ((4 * 7 * 2 * 6) * 7 + 6 + (8 * 5 + 9 + 4) + 9) + 7 * 7 * 9 + 3
2 + 4 + 2 + (9 * 6 + 2 + 8) * 2 + 6
5 + (9 + 2 * (3 * 5 * 5 * 8 + 3) + (2 * 3 * 3 * 5) + 6) * 7
6 * 8 + 4 * 9 + 7 * ((8 * 5 * 8 + 9 + 4 * 4) + 5)
((6 * 5 * 2 * 7) + (7 * 9 + 9 * 5 + 7)) + 2 + 5 + 7 * ((4 * 4 + 2) + 9)
2 * 3 * 4
5 * (5 * 9 * (7 * 2 + 4 * 5 * 4 * 8)) + 9 + 9 * 5
((9 + 8 * 2) * 7) * 7 * 3 * 8
7 * 9 * 3 + ((8 * 7 + 6 * 7 + 7 + 8) + (4 + 7 * 8 + 9 * 4 + 4) + 9)
3 + 8 + ((8 * 6 + 4 + 9 * 6 * 4) * 8 * (9 * 9 + 3) + 3 * 3)
2 * 4 * (9 + (6 * 6 * 2) + 6 + 6 + (5 * 8 * 3 * 2 + 8))
9 + (7 + 3 * (8 + 9) + 6 * (4 + 8 * 2 + 2)) * 9
5 * (3 + (9 + 4 * 2) * 4 * 9 + 2) + 9 * 7 + 6
8 + 4 + (3 * (4 + 8 + 6 * 2 * 5 * 4) * 2 * 6) + 6 + 2 + 3
(3 + 8) + 9
4 * (2 * 3 + 5 * (3 * 5 * 3 * 8 + 6) + 4 * 5) * 7 + 4 * (8 * 7 * 3 + 9 * 5)
5 + 2 + 3 + 5
(5 + 8 * 5 * 3 * 3 * 8) * 7 + 3 + (6 * 3 * 4 * 4 * (7 + 3 * 2 + 4)) * 8 + (5 + 5 + 8 * 3 * (3 * 6))
6 * (7 * (2 * 4 * 4 + 4) + 6 * (3 * 7 + 8 * 8) + 2)
2 * 3 + 8 * 4 * (4 + 7) + 8
6 + (9 + (8 * 2 * 7) + 6 * 9 + 5 + 9) * 6 + ((7 + 5 * 4 + 6) + 4) * (3 + 8 * 6)
3 * (9 * (6 + 3 + 8) + 5 * (5 * 5 * 7) * 9) + 4
(7 * 7 + 8) * ((8 + 7 * 8) + (8 * 2 + 9) + 4 * 8 * (2 * 8 + 7 + 2) + (9 + 9)) * 8 * 3
(8 + 6 * 5 + 4) * 7 + 4 + (3 + 4 + 9 * 9 + 9) + 5
6 * 4 * 7 * (2 * 4 + 7 + 8) + 9
2 * 4 + 8 * 4 * 8
7 + 7 * (2 + 2 * 6 * 8)
(6 * 7 * 7 * 2 * 8) * (9 * 2 + 8 * 4 + 9 + 9) + (5 + 8) + 3 * 5 * 3
3 * 7 * 2 + ((8 + 5) + 7 * 5 + (2 * 6 * 6 * 6 + 8 * 2) * 3) + 5
2 + 8 * ((3 * 8 + 7 * 4 * 5) * (6 + 7 * 3 * 7))
5 * (9 + 6)
((5 * 4 + 9 * 8 * 5 * 4) * 3 + 4 * 8 + 6 + 8) + 7 + (3 * 6 + 9 + 6 * 3) * (7 * 4) * 5
3 + 4 * 2 + 6 + 2 + (3 + 6 * (7 + 6) + 8 * 5 + 5)
8 * 5 + (4 + 3 + 2 * (2 * 5) * 5 * 3) * 2
2 + 8 * 4 + 6 * (9 * 6 + 4) * 2
2 + (5 + 8 * 9) + 8 * 7 + (4 + 7 + 7 + 5 * 6 * 8) + (5 + (6 * 9) * 3 * 2)
(5 * (2 * 6)) + 4 * (4 + (6 * 6 + 4) * 4 * 4 * 7)
3 * (9 + 9 * 7 * (2 * 4 + 5 + 7) + 3 + 9)
9 + 6 * (8 + (5 + 2 + 6) + 4 + 2) + 7 * 8
6 * 5 * (6 + (8 + 5 * 9 * 3 * 3) * 2 * 7 * 3) * 2
2 + 3 * 7 + 4 + 3
((5 + 5) + 5 + 3 * 8) + 7 * 7 + 4
3 + ((2 * 2 * 6) + 8 * (2 * 5 + 8)) * 8 * 3 + 8 * 6
(3 * 8 + 7 * 4) * 4 + (6 * 9 + 5) * 2 + 6
5 * 3 + ((9 + 4 * 5 * 9 * 7) + 7 * 7 + 4) + 5
2 + 5 * 9 + 7 * ((9 + 8 + 3) + 5 * 6 * 6 * 2)
(4 * (4 + 8 + 6) + 5) * 8 * 3 * 9 * 6 * 6
7 * 4 + 8 + 5 * (3 + 8 + 3 * 8 + 2) * 8
(5 * 5 * 2 + 3 * 4) * ((6 + 8 * 2) + 8 + 3 * 4 * 9 + 7) + 3 + 7
(5 + 8 * (2 + 4) * 3) * 5
9 + 2 + ((5 + 2 * 5) * 6 * 7) + (3 * 4 * 5 * 3 + 7 + 7)
4 + 4 * 3 + 6 * ((7 + 8 * 2 + 7) + 7 + 8 * 2 * 9 * (6 * 7 + 3 + 2)) + 5
6 * 8 + 5
3 + 7 + 7 * 7 + (7 * (6 + 4 * 6 + 5 * 5 * 2) * 7 + (5 + 9 * 2 + 6))
(3 + (4 + 5 * 7)) * 5
(4 * (8 + 7) * 2) + 7 * 8 + 9 * 5
4 * 9 * 7 + 5 + (2 * 7 + 5 + 2) + 2
(9 + (9 + 8 * 9 + 4) + 6 * (9 + 8 + 7 + 2 + 4) + 6) * 4 + 4 + 5
6 * 7 + 2 + 2 * 9 + ((2 + 8 * 8 + 5 * 7) * (7 * 3 + 4 + 6) * 4 * (2 * 2 * 6 + 8 + 8 + 3))
(8 * 3 + 6 * 3 * 2 + 6) + 5 * 9
9 + ((5 * 8 * 8 * 3 * 9 + 3) * 4) + 2 + 7
(3 + 4 + 7 * 5) + 5 + 6
3 + 6 + (4 + (8 + 5 + 9) * 3 * 2) + ((9 + 5 + 8 * 6 + 4) + 9 + 6 * 6) + 5 * ((7 + 2 * 2 * 8) * (5 + 7 * 6 * 9 + 4) * 6 + 7)
7 + 9 * 6
2 + 3 + 2 * 6 + (6 * 3 * 6 + 6 * 3 + 8) * 4
3 * 7 * 9 * 4 * 9 + 4
4 * (9 + (6 * 4 + 3 * 4 * 8 * 7) + 3 + 2)
((5 * 4 * 8 * 9 + 6) + 9) * 3 * 9 * 3
8 + 7 + 9 * (4 + 4 + (4 + 3 * 5 + 4 * 9)) * 7 * 8
7 + 9 * 9 * 6 + 5
6 * (4 * 9 + 7 * 3) + (5 * 9) * 6
(7 + 8 * 8) + 9 + (5 + 5 * 9) * 2
(8 * 6) + ((9 * 7 * 2 * 4 * 4) * 6 * 7 * 3) * 7 * (9 * 9) * 2
(2 * 9) + ((3 * 8 + 3) * (3 * 9 + 3 + 3) + 5 * 3 * 5 + (5 * 7 + 2 * 7)) * 3 * (7 + 9 + 8 * 5 + 6) + (8 * (8 + 7) * 5)
6 * 2 + 8 * (9 + (4 + 3 + 4 * 7 + 9) + 2) * (7 + (8 + 4 * 8 * 6 + 2) * 6 + 9 + 2) * 4
(8 + 3 * (5 * 4 + 3 + 7 * 3)) + 8 * 6 + 8 + 4
((8 + 9 * 5 + 5 + 3 + 6) + 6 * 4 + 7) * 9 * 5 + 9 * 2 * 4
(9 * 9 + 7 * 5) * 3 * 6 + 7
6 * (6 + 2 + 3 * 6 + 3)
4 * (4 + (4 + 8 * 7) * 5 + 3 * 6 * 2) + 3 * 4 + 6
7 * (7 * 9 * 2 * 9 * (5 * 2 * 5)) + 5
((3 * 6 * 2) + 2) * (4 * 7 * 9 + 7 * 3)
6 * 6 * ((3 + 6) + 5 + 5 * 4 + 7) * 5 + 7 + 8
6 + (8 + 4 + (3 + 6 * 8) + 5 + 3) * 5
3 * (5 * 4) * (4 + 7 * 3 * (4 + 4 + 8 * 4 + 6)) + 5
7 + 7 + 4 + (3 * 2)
(2 + 9) * 9 * 3 * 8
8 * 6 * 2 * 7 * 8 * (7 * 6 * 4 * 9 * 6 + (2 * 3 * 5 + 5 * 4 * 4))
7 + 8 * (2 + (4 * 7 * 9 * 9 + 3 + 2) + 3 * 9 + 2) * 2
(3 * 4 * 5 * (5 + 6 * 2 * 4 + 7) + 8) + 4 * (7 * 6)
4 * 7 * (4 + 9 * 8 * 4) + 8 * 3 * 3
8 * 8 + ((5 + 7) + (6 * 7 + 4) * 4 * (9 + 6 + 8 + 5) + 6)
(2 + 2 * 2 * 2 * (6 + 8 + 6) + 8) * 5
3 + (9 * 6 * 9 + 8) * (6 + (4 + 9 + 5)) * 4
7 + (2 * 7 + (8 * 8 + 5 * 9 + 7) * 2 * 5)
8 * 8 * 9 * 8 + (3 * 9 + 9 + (6 + 2 + 4 * 5) * 2) * 2
9 + 8 + (3 + 3) + (9 + 8 * (5 * 2 * 5 * 2) * 7 + 9 * (6 * 2 + 4 * 8)) + (2 * 7 + 6 * (3 + 3) * 5 * 6) + 6
8 + (8 * 6 * 3 * (4 + 6 + 4 + 5 + 3) * 3) * 9 + 7
5 + ((8 + 4 + 8 + 8 + 7 * 5) + (7 * 2 * 6 * 7) + 5 + 7 + (6 * 3 * 3 + 4 + 9 + 3) + (5 + 2 * 4)) + 5
8 * 9 + (4 * 9 * 3) + (2 * 8 * 2 + 2 * 9 + 8) * 5
9 * (6 * 5 * 7 + 8) * 7
7 * 5 + 2 * (8 * 4 * 4 * (5 * 7 * 4 * 4 + 9 * 4)) * 7 * 4
((7 + 2 * 5 + 4 * 7) + 6 * 3) * (9 * (4 * 5 * 4) * 6 + 2) + 2 * 5
((8 + 9 * 8 + 6) + 9 + 4) * 4
8 * 8 + 2 * (8 * 6 * 9) + 2 + 4
8 * 5 + (5 + (2 * 7 * 5 + 3 * 8 + 6) * 8 * (3 + 2)) + 6 + 9 * 8
7 + (6 + 5 + 5 + 4) * 5 + 5
6 * 2
5 + 2 + 4 * ((2 * 2) + 4) * ((8 * 3 + 7) * 4) + 8
2 * 6 * 3 * (9 * 5) * 4
(6 * 8 + 8 + 3 * (5 + 3 * 5) + 3) + 9 * 2
(8 + 2) + (8 + 3) + 4 * (7 + (8 * 2)) * 2 * (7 + 4 * 7 * 3 + 8)
4 * (2 * 3) * 9 * (9 * 8 + 7 + 3)
8 * 5 + (6 + 2 * 2 * (9 * 5) + 4 * 3) * 6 * 9
9 * 3 * 5 + 8 * 3 + ((6 * 8 + 4 * 6 + 3 + 3) + 4 + 4 * (9 + 7 * 3 * 5 + 5 + 6) + 3)
7 + 4 * 7 + (2 * 8 + 8 * 8 + 4 * 9) * 9
(5 * 4 + 6 + 6) * 6 + 3 * 2 * 5
((9 * 2 + 4) * (6 * 2 * 2 * 2 + 2) + 5 * 3 + 2) + 7 * 7 + 9
6 + 5 * 7 * 9
(9 * 7 * (2 * 4 + 7 * 7 + 6) * 5) + 7
(8 + 6 * 8 * 4) * 8 + (8 * (3 + 3 * 2 + 8 + 3 + 6) * 9 + 7 + 6) + 9 * 2
4 * 2 * (7 * (6 * 6 * 8)) * (3 + 6 + 3)
8 + 5 * 7 + 2 + 7
3 + 6 * 3 * 4
4 + 2 + ((7 + 7 + 5) * (8 + 7 * 3 + 3 * 9 + 5) * 3 * (6 + 7 + 7 + 5 + 5 * 3) + 2)
3 * 3 * 6 + (4 + (9 * 9 + 9 * 9) * 4 * 3) * 3 * 5
5 * 8 * (9 * 3 * 4 + 7 + 6) * 7 + (7 * 2 + 5 + (8 * 8 * 8))
6 + (4 + 6 * 3 * (3 * 4 * 5 * 8 + 6) + 4 + 6) + 5 * (6 * (8 * 9) * (9 * 5 + 7 * 7 + 2)) * 2 * 7
8 * (8 + 9 * 6) * 5 * 7 * 5 * 3
((7 + 7 * 3 + 5 * 4 * 4) + 2 * (5 + 6 + 3 * 5 + 3 + 2) + 5 * 2 * 8) * 4 + 3 + 2 + (2 + 4 + 8 + 5 * (8 * 7 + 4 * 3 + 6)) * (5 * 6 * 2 * (6 * 4 * 4))
9 + 6 * 6 * 9 * 7 * ((8 + 6 * 2 + 5) + (4 + 9) * 3 + 2)
((8 * 7 + 9 + 2 + 3) * 3 * 5 * 5 + 9) + 2 * 6 + 9
8 * 3 * (9 * (2 * 2 + 2 + 2 * 8 + 2) + 2 + 4) * (9 * 8)
9 + (6 + 8 * 6 + (2 * 4)) + 4 * 5
7 + (7 * 9 + 5 + 9 + (9 * 2 + 9 * 2) * 6)
8 + (8 + 3 + 3 * 7 + 3 + 6) + 3 + 8 + (4 + 5 * 8 * 3)
2 + 2 * 3
(7 + 3) + 5 * 7 + 2 + 5
9 + 2 * 2 + (3 + 8 * 2 * 4)
((7 * 8 * 8 * 4) * 9) * 3
(6 * 7 + 2 + 3 + 7) + (9 * 9 * 7) * 6 + 8 + 7 * (5 * 6 * 4 + (2 * 3 + 6) + (4 + 5 + 8 * 3))
(2 + 3 * 4) * 4 + 8 * (7 * 6 + 2 * 5 * 2) * 7 + 5
4 + 6 + ((4 * 7 + 4 * 7 + 3) + 5 * 2 * (2 * 3 + 3)) + (2 + 2) * 7 * 2
8 + 8 * (9 + (2 + 9 * 8 + 2 + 9 * 5) + (5 + 3 * 8 * 5 + 9 * 3) * (9 * 8 + 9 * 8 * 7 * 8))
(7 * 4 * 4) * 4
5 * ((4 + 8 + 8 + 8) * 3) * 9 + (3 + 7 * 5 + 9) * 9
4 + ((3 * 2 * 6 * 8 * 6) + 4 * 6 * 4 * (4 * 6 + 5 + 2)) * 7
4 * (3 * 8 + 9 * 3 * 2) * 7 * 2
7 + 9 + 5 * 5 + 6 + 4
6 + 3 + (2 * 2) * 8 + 5 + 4
7 + 9 + 6 * (8 * 4) + (6 + (5 * 7 * 4 + 8 + 8) + 8 + 8 * 8 * 3)
3 * ((8 * 9 + 9 + 6 + 9 + 5) * (9 + 9 * 6 * 6 * 5 + 6) + 6) + 5 + 5 * 4
8 + (4 + (4 * 4 * 9 * 5 * 3) * 7 + 9)
6 * 9 * (3 + (9 * 6) * 5 * 7) + (6 * 2) * 5
((7 * 5 + 5 * 3 * 6 + 3) * 9 + 3 + (3 + 2)) + 2
6 + (6 * 3 + 6 + 9)
5 * (8 + 8 + 4 + 8 + 7 * 8) * 3
8 + 6 + 8 + (8 + 4) * 7 + 2
8 * 2 * 6 * 6 + (2 * 8)
8 * 9 + (3 + (6 + 9 * 3 + 8)) + 6 * 9 + 8
(7 + (3 + 6) * 5 * 4 * 3) + 3 + (9 + 9 + 5 * 7 * 5 * 6) + (2 + 2 + (4 * 8 + 9 + 6 * 6 * 9)) + 5 + 9
(7 * 8 * 4) * 8 * 4 * (2 + 7 * 7 + (4 + 7)) * 9 + 9
5 * 8 * (7 + 2 * 9 * (3 + 7 + 9)) * 2 + 7
2 + 7 + 4 + 5 * ((5 + 3 * 5) * (7 + 9 * 6 + 2 * 2)) + 7
(7 + 8 * (5 * 9 * 8) + (8 * 7 + 8) + 2) + 7 + 3 + 8
8 + 3 * (9 + 7 + (8 + 4 + 6 * 3)) + 9 + 5
5 * 7 + 5 * 2 + 7 * 8
7 * 7 + 3 * (3 + 4 + 8 + 3 * (6 + 6 * 6 * 5 * 8 + 9) + 7) * 9 + (8 * 5)
6 * ((4 * 3 + 5 * 4) * 9 + 2 * (4 + 4 + 5 * 7) * 3) + (6 + 8) + ((8 + 9 * 4 + 8 * 5 + 5) + (7 * 7))
4 * 2 + (4 * 8 + 7 * 2 + 5) + 5 + 2 + 8
5 * (6 + 3 * 9) + 3
9 + 9 + 5 * ((6 + 7 * 2 * 5 + 7 * 2) * 2)
(9 + 8 + 9 * 9 * 4 * 7) * 3
3 * 9 + ((9 + 5) * 7)
9 * 9 + (3 + (8 * 6 * 9 + 6)) * (6 * 4 + 4 * 3) + 5 * 9
8 + (8 + 2) * 3 * 3
(8 * 8 + 5) + 8 * 2 + 6 + (9 * 6)
(9 * (8 + 2 * 7 + 7 + 7) + (4 * 9 + 6 * 8) + 9 * 5) + 9 + 9 + 4
5 * (9 * 5 + 5 + (2 * 5 * 8 * 2 * 9 + 2)) * 9 + 3
((7 * 4) + (3 * 6 + 7) * 4 * (3 + 8 + 9) + 3) * 9 + 7 + 5
(6 * 4 + 9 + 4 * 4) + 7 * 3 + (4 * 2 + 7 * 5 + 3)
7 + (6 + 4 + 7 + 9 + 6 * 4) * 7 + 6 * 9
8 * ((4 * 2 + 4 * 9) + 9 * 3 * 4 * 3 + 9) * 5
8 * 8 + 7 + (9 * (5 + 9 + 5 * 5 + 7 * 5))
((7 + 5 + 2) + 5 * 3) + 7 + ((6 * 2 * 5 + 7) * 3 + 2 * 8)
3 + ((2 * 9 + 5) + (7 * 8 * 6) + (2 * 3) * 8 + 8) * 4 + 4 + 9
2 + 6 + (3 + 3 * 6 * 6 + (6 + 4 * 6 + 7)) * 2
(4 * 7 * (8 * 5) + 7 + 8 * 6) * 9 * 9 * 9
7 * 2 * 7 + 8 * 5
2 * (3 * 8) + ((8 + 3 + 8) * 9 * (7 * 5) + 6 * 8 * 8)
(5 * 6 + 8 + 8 * (6 + 3 + 6 + 6)) * 6
7 + 6 + (2 * 4 * 5 * 6 + (7 * 5 + 5 + 4 * 3 + 8) * 5)
7 + 8 * 6 * ((3 + 5) * 9) + 8
4 + (3 * 6 * 5 * (2 * 8 * 3)) * 4
((4 + 5 * 5 + 9) + 2 + 9 * 5) * 8 + 2
9 * 7 + 9 * 8 + 3 * 3
7 * 7 * 9 * 5 * 2 * 4
2 * (2 * 7 * (9 + 8 * 3 + 4 * 9 * 7) * 2 + 2 + 6) * 6
9 * 9
7 + (3 * 6 + 3 * 7 + 3) + 7
3 * 4 + 9 * 6 + (6 * 6 + (3 * 4 + 8)) * 6
3 + 5 + 3 + 5 + ((7 + 8 * 8 * 6 + 9 + 8) * 8 + (2 + 9 + 7) * 5 + 7) * 9
2 * 4 + (9 + (9 * 4) * 4 * 3) + 7 + 9
3 * 3 + (6 * 3 + 9) * 3 * (6 + 8 * 2) * 7
(3 * 5 + 9 * 9) + 9 * (4 * 8 * 2 + 6 * 4 * 8) * 3 * 4
6 * (3 * 2 * 8 * 3 + 6 * 7)
(2 + (6 + 4 * 2 + 6 * 7) * 7) + 3 * 6 + 2 + 4 + 3
2 + 6 * ((6 * 9 + 3 * 2 * 9) + (8 + 5 + 9 * 3 + 2 + 2) + 9) * 4 + 7
(8 * 3 + 4 + 3) + 7 * 6 * 2 * 8 + 3
9 * 6 + (6 * (2 * 8 * 4 + 9 + 6) * 8 * (4 * 4) + (9 + 5 + 9 + 6)) + (5 * 2 + 8) + (3 + 8) + 5
(3 + 5 + 7 * 9 * (7 + 5 + 2 * 9 + 4 * 4)) + 8 + 3 + 5 + 6 * 9
5 + 5 * ((9 + 7 * 4) * 3 * 9) + (9 * 7 * 9) + 7 + 6
7 + (7 * 6) + 9 + 8 * 6 + 9
2 * 4 + (4 + 2 + 7)
9 + (4 * 3 + 8 * (7 + 5 + 5 + 3 * 8)) + 9 + 4 * 8
6 * 8 + 7 * 5 + (6 * 7 + 7 * 6 * 8) + (4 + 6 + 3)
